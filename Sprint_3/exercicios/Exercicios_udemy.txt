------- Ex1 -------

from datetime import datetime

idade = None

try:
    nome = input('Nome: ')
    idade = int(input("Idade: "))
except EOFError:
    pass

if idade is not None:
    ano_atual = datetime.now().year
    centenario = ano_atual + (100 - idade)
    print(centenario)


------- Ex2 -------

numeros = []
for i in range(3):
  numero = int(input("Digite um número: "))
  numeros.append(numero)

for numero in numeros:
  if numero % 2 == 0:
    print("Par:", numero)
  else:
    print("Ímpar:", numero)


------- Ex3 -------

numeros = range(0, 21, 2)

for numero in numeros:
  print(numero)


------- Ex4 -------


def eh_primo(n):
  if n < 2:
    return False

  if n == 2:
    return True
 
  if n % 2 == 0:
    return False

  for i in range(3, int(n**0.5) + 1, 2):
    if n % i == 0:
      return False
 
  return True


numeros = range(1, 101)


for numero in numeros:
  if eh_primo(numero):
    print(numero)


------- Ex5 -------

dia = 22
mes = 10
ano = 2022

print(f'{dia}/{mes}/{ano}')


------- Ex6 -------

a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

conj_a = set(a)
conj_b = set(b)

intersecao = list(conj_a.intersection(conj_b))
print(intersecao)


------- Ex7 -------

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


impares = []


for elemento in a:
  
  if elemento % 2 != 0:
    
    impares.append(elemento)


print(impares)


------- Ex8 -------

palavras = ['maça', 'arara', 'audio', 'radio', 'radar', 'moto']


for palavra in palavras:

  invertida = palavra[::-1]
  
  if palavra == invertida:
    
    print("A palavra:", palavra, "é um palíndromo")
  else:
    
    print("A palavra:", palavra, "não é um palíndromo")


------- Ex9 -------

primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
idades = [19, 28, 25, 31]


for indice, primeiroNome in enumerate(primeirosNomes):
  
  sobreNome = sobreNomes[indice]
  idade = idades[indice]
  
  print(indice, "-", primeiroNome, sobreNome, "está com", idade, "anos")


------- Ex10 -------

def remover_duplicados(lista):
  
  conjunto = set(lista)
  
  lista_sem_duplicados = list(conjunto)
  
  return lista_sem_duplicados


lista = ['abc', 'abc', 'abc', '123', 'abc', '123', '123']


print(remover_duplicados(lista))


-------- Ex11 --------

with open('arquivo_texto.txt') as arquivos: 

    for texto in arquivos:
        print(texto, end='')
        

------- Ex12 --------

import json


arquivo = open('person.json', 'r')


dicionario = json.load(arquivo)


print(dicionario)


arquivo.close()


-------- Ex13 ---------

def my_map(lista, f):
  
  resultado = []
  
  for elemento in lista:
    
    resultado.append(f(elemento))
  
  return resultado


lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def potencia_de_2(numero):
  return numero ** 2


print(my_map(lista, potencia_de_2))

---------- Ex14 ----------

def imprimir_parametros(*args, **kwargs):
  for arg in args:
    
    print(arg)
 
  for valor in kwargs.values():
 
    print(f'{valor}')

imprimir_parametros(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)


---------- Ex15 ---------

class Lampada:
    def __init__(self, ligada=False):
        self.ligada = ligada

    def liga(self):
        self.ligada = True

    def desliga(self):
        self.ligada = False

    def esta_ligada(self):
        return self.ligada


lampada = Lampada()
lampada.liga()
print("A lâmpada está ligada?", lampada.esta_ligada())

lampada.desliga()
print("A lâmpada ainda está ligada?", lampada.esta_ligada())


-------- Ex16 ----------

def somar_numeros(string):
  
  lista = string.split(',')
  
  soma = 0
  
  for elemento in lista:
    
    numero = int(elemento)
    
    soma += numero
  
  return soma


string = "1,3,4,6,10,76"


print(somar_numeros(string))


--------- Ex17 ----------

def divide(lista):
  tl = len(lista)
  tp = tl // 3

  l1 = lista[:tp]
  l2 = lista[tp:2 * tp]
  l3 = lista[2 * tp:]

  return l1, l2, l3


lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

l1, l2, l3 = divide(lista)

print(l1, end=' ')
print(l2, end=' ')
print(l3)


---------- Ex18 -----------

speed = {'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53, 'july':54, 'Aug':44, 'Sept':54}


valores = speed.values()


conjunto = set(valores)

lista = list(conjunto)


print(lista)


---------- Ex19 ----------

import random 

random_list = random.sample(range(500),50)


valor_minimo = min(random_list)


valor_maximo = max(random_list)


soma = sum(random_list)


tamanho = len(random_list)


media = soma / tamanho


random_list.sort()


if tamanho % 2 == 0:


  indice1 = tamanho // 2 - 1 
  indice2 = tamanho // 2     
  mediana = (random_list[indice1] + random_list[indice2]) / 2
else:

  indice = tamanho // 2 
  mediana = random_list[indice]

print(f'Media: {media}', end=', ')
print(f'Mediana: {mediana}', end=', ')
print(f'Mínimo: {valor_minimo}', end=', ')
print(f'Máximo: {valor_maximo}')


----------- Ex20 ---------

a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]
a.reverse()
print(a)


---------- Ex21 ---------

class Passaro:
  
  def voar(self):
    
    print("Voando...")

  def emitir_som(self):
    
    pass

class Pato(Passaro):
  
  def emitir_som(self):
    
    print("Pato emitindo som...")
    
    print("Quack Quack")

class Pardal(Passaro):
  
  def emitir_som(self):
    
    print("Pardal emitindo som...")
    
    print("Piu Piu")

pato = Pato()

print(pato.__class__.__name__)

pato.voar()

pato.emitir_som()

pardal = Pardal


-------- Ex22 ----------

class Pessoa:
    def __init__(self, id):
        self.id = id
        self.__nome = None

    @property
    def nome(self):
        return self.__nome

    @nome.setter
    def nome(self, valor):
        self.__nome = valor

pessoa = Pessoa(0) 
pessoa.nome = 'Fulano De Tal'
print(pessoa.nome)


--------- Ex23 ----------

class Calculo:

  def soma(self, x, y):

    return x + y


  def subtracao(self, x, y):

    return x - y


calculo = Calculo()


x = 4
y = 5


resultado_soma = calculo.soma(x, y)


print(f"Somando: {x}+{y} = {resultado_soma}")


resultado_subtracao = calculo.subtracao(x, y)


print(f"Subtraindo: {x}-{y} = {resultado_subtracao}")


----------- Ex24 ----------

class Ordenadora:
  def __init__(self, listaBaguncada):
    self.listaBaguncada = listaBaguncada

  def ordenacaoCrescente(self):
    
    self.listaBaguncada.sort()
    return self.listaBaguncada

  def ordenacaoDecrescente(self):
    
    self.listaBaguncada.sort(reverse=True)
    return self.listaBaguncada


crescente = Ordenadora([3,4,2,1,5])
decrescente = Ordenadora([9,7,6,8])


resultadoCrescente = crescente.ordenacaoCrescente()
resultadoDecrescente = decrescente.ordenacaoDecrescente()


print(resultadoCrescente)
print(resultadoDecrescente)


------------- Ex25 ------------

import sys

class Aviao:
  def __init__(self, modelo, velocidade_maxima, capacidade):
    self.modelo = modelo
    self.velocidade_maxima = velocidade_maxima
    self.capacidade = capacidade
    
    self.cor = "azul"

  def __str__(self):
    
    return f"O avião de modelo {self.modelo} possui uma velocidade máxima de {self.velocidade_maxima}, capacidade para {self.capacidade} passageiros e é da cor {self.cor}."


lista_avioes = []


try:
  entrada1 = sys.stdin.readline().split(":")
  aviao1 = Aviao(entrada1[0], entrada1[1], entrada1[2])
  lista_avioes.append(aviao1)

  entrada2 = sys.stdin.readline().split(":")
  aviao2 = Aviao(entrada2[0], entrada2[1], entrada2[2])
  lista_avioes.append(aviao2)

  entrada3 = sys.stdin.readline().split(":")
  aviao3 = Aviao(entrada3[0], entrada3[1], entrada3[2])
  lista_avioes.append(aviao3)

except IndexError:
  print("Entrada inválida. Digite as entradas separadas por dois pontos (:).")


for aviao in lista_avioes:
  print(aviao)

